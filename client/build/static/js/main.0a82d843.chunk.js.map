{"version":3,"sources":["pages/Home.js","pages/MyLists.js","components/ListItem.js","components/List.js","pages/CreateList.js","components/Main.js","index.js"],"names":["Home","useState","user","setUser","instance","axios","create","baseURL","useEffect","get","withCredentials","then","response","data","catch","error","console","log","name","className","onClick","type","href","role","to","variant","pathname","save","MyLists","userLists","setUserLists","deleteList","e","listID","target","value","delete","lists","length","map","element","index","listName","listId","ListItem","props","action","method","content","handSubI","cumIndex","handUpda","handDele","List","input","setInput","subItemInput","setSubItemInput","listArr","setListArr","listTitle","setListTitle","setListID","submitClass","setSubmitClass","cancelTokenSource","CancelToken","source","postList","dataSent","items","post","cancelToken","token","pendingAxiosCalls","interceptors","request","use","config","Promise","reject","noFetchNeeded","useRef","current","skipFirst2Renders","cancel","inputTxt","focus","subItemTxt","handleSubItemChange","newInput","handleUpdate","prev","prevClone","a","Object","assign","updateTarget","targetArray","targetIndex","currIndex","item","splice","preventDefault","handleDelete","deleteTarget","subItemInputLimiter","subItemInputFound","collapsePrevSubItemInput","i","txtInput","showSubItemInput","locateTarget","displayNewList","newList","parentIndex","parInd","object","key","onChange","ref","addOrCreateSubList","handleSubItemSubmit","newListItem","CreateList","location","Main","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a82d843.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Home() {\r\n  const [user, setUser] = useState({});\r\n\r\n  //https://mohanned-todolistv2.herokuapp.com/auth\r\n  //specifies where to access the server and DB\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:3001/auth\"\r\n  });\r\n\r\n  //pulls user's saved List from DB and stores it in listArr\r\n  function fetchUser() {\r\n    instance\r\n      .get(\"/pullUser\", {withCredentials: true})\r\n      .then(function(response) {\r\n        setUser(response.data);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function logUserOut() {\r\n    instance\r\n      .get(\"/logout\", {withCredentials: true})\r\n      .then(function(response) {\r\n        setUser({});\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(fetchUser, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Version 0000000000006 </h1>\r\n      <h6>\r\n        BEFORE YOU USE THIS WEBSITE, KNOW THAT I (MOHANNED AL NOUMAN) HAVE\r\n        ACCESS TO ALL OF YOUR LISTS SO PLEASE DON'T POST ANYTHING PRIVATE\r\n      </h6>\r\n      <h6>This website may contain a few bugs</h6>\r\n      <h2>\r\n        Hello {user.name ? user.name : \"anonymous\"} and welcome to Mohanned's\r\n        List App!\r\n      </h2>\r\n\r\n      <div className=\"col-sm-4\">\r\n        <div className=\"card social-block\">\r\n          <div className=\"card-body\">\r\n            {user.name ? (\r\n              <button\r\n                onClick={logUserOut}\r\n                className=\"btn btn-block\"\r\n                type=\"submit\"\r\n              >\r\n                Logout\r\n              </button>\r\n            ) : (\r\n              <a\r\n                className=\"btn btn-block\"\r\n                href=\"http://localhost:3001/auth/google\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fab fa-google\"></i>\r\n                Login with Google\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n\r\n      {user.name ? (\r\n        <Link to=\"/MyLists\">\r\n          <button variant=\"outlined\">Click here to view your lists</button>\r\n        </Link>\r\n      ) : (\r\n        <Link\r\n          to={{\r\n            pathname: \"/CreateList\",\r\n            save: false\r\n          }}\r\n        >\r\n          <button variant=\"outlined\">\r\n            Click here to create a new list (this will not be saved unless you\r\n            login PRIOR to creating your list)\r\n          </button>\r\n        </Link>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport default function MyLists() {\r\n  const [user, setUser] = useState({});\r\n\r\n  const [userLists, setUserLists] = useState([]);\r\n\r\n  //https://mohanned-todolistv2.herokuapp.com\r\n  //specifies where to access the server and DB\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:3001\"\r\n  });\r\n\r\n  //pulls user's saved List from DB and stores it in listArr\r\n  function fetchUser() {\r\n    instance\r\n      .get(\"/auth/pullUser\", {withCredentials: true})\r\n      .then(function(response) {\r\n        setUser(response.data);\r\n        setUserLists(response.data.lists);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(fetchUser, []);\r\n\r\n  function deleteList(e) {\r\n    let listID = e.target.value;\r\n\r\n    instance\r\n      .delete(\"/api/\" + listID, {\r\n        withCredentials: true\r\n      })\r\n      .then(function(response) {\r\n        setUserLists(response.data);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hello {user.name}, here are your lists:</h1>\r\n\r\n      {userLists.length > 0 ? (\r\n        userLists.map((element, index) => {\r\n          return (\r\n            <div>\r\n              <p className=\"vis\">\r\n                {element.listName ? element.listName + \" list\" : \"unnamed list\"}\r\n                <Link\r\n                  className=\"invis\"\r\n                  to={{\r\n                    pathname: \"/CreateList\",\r\n                    listId: element.listId,\r\n                    save: true\r\n                  }}\r\n                >\r\n                  <button variant=\"outlined\">\r\n                    Click here to access this list.\r\n                  </button>\r\n                </Link>\r\n                <button\r\n                  className=\"invis\"\r\n                  value={element.listId}\r\n                  onClick={deleteList}\r\n                  type=\"submit\"\r\n                  name=\"deleteButton\"\r\n                >\r\n                  Delete\r\n                </button>\r\n              </p>\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <p>You don't have any lists yet! Get started below!</p>\r\n      )}\r\n\r\n      <Link\r\n        to={{\r\n          pathname: \"/CreateList\",\r\n          save: true\r\n        }}\r\n      >\r\n        <button variant=\"outlined\">Click here to create a new list.</button>\r\n      </Link>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <Link to=\"/\">\r\n        <button variant=\"outlined\">\r\n          Click here to return to the homepage.\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction ListItem(props) {\r\n  return (\r\n    <form action=\"\" method=\"\">\r\n      <li className=\"vis\">\r\n        {props.content}\r\n        <button\r\n          className=\"invis\"\r\n          onClick={e => {\r\n            props.handSubI(e, props.cumIndex);\r\n          }}\r\n          type=\"submit\"\r\n          name=\"createTxtInput\"\r\n        >\r\n          <i className=\"fas fa-indent\"></i>\r\n        </button>\r\n        <button\r\n          className=\"invis\"\r\n          onClick={e => {\r\n            props.handUpda(e, props.cumIndex);\r\n          }}\r\n          type=\"submit\"\r\n          name=\"updateButton\"\r\n        >\r\n          <i className=\"fas fa-edit\"></i>\r\n        </button>\r\n        <button\r\n          className=\"invis\"\r\n          onClick={e => {\r\n            props.handDele(e, props.cumIndex);\r\n          }}\r\n          type=\"submit\"\r\n          name=\"deleteButton\"\r\n        >\r\n          <i className=\"fas fa-trash-alt\"></i>\r\n        </button>\r\n      </li>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import React, {useState, useEffect, useRef} from \"react\";\r\nimport ListItem from \"./ListItem\";\r\nimport axios from \"axios\";\r\n\r\n//displays the list of items and subitems\r\nexport default function List(props) {\r\n  /*****************State Variables******************/\r\n\r\n  //tracks what's in the input text box\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  //tracks what's in the update/subitem text box\r\n  const [subItemInput, setSubItemInput] = useState(\"\");\r\n\r\n  //stores user's items in an array\r\n  const [listArr, setListArr] = useState([]);\r\n\r\n  //tracks the lists title\r\n  const [listTitle, setListTitle] = useState(\"\");\r\n\r\n  //contains the list ID if available to save/update the list\r\n  const [listID, setListID] = useState(props.listId ? props.listId : \"\");\r\n\r\n  //reveals the submit text box and button when the list has finished loading.\r\n  //this is done to prevent possible loss of sync between the displayed list and list on the DB during initial loading of webpage\r\n  const [submitClass, setSubmitClass] = useState(\"invis\");\r\n\r\n  /*****************Ajax requests******************/\r\n\r\n  //https://mohanned-todolistv2.herokuapp.com/api/\r\n  //specifies where to access the server to route to the DB\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:3001/api/\"\r\n  });\r\n\r\n  //pulls user's saved List from DB and stores it in listArr\r\n  function fetchList() {\r\n    instance\r\n      .get(listID, {\r\n        withCredentials: true\r\n      })\r\n      .then(function(response) {\r\n        setListArr([...response.data.items]);\r\n        setListTitle(response.data.name);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  //Allows us to prevent multiple post requests from occuring simultaneously\r\n  const cancelTokenSource = axios.CancelToken.source();\r\n\r\n  //stores the user's list in the DB\r\n  function postList() {\r\n    let dataSent = {\r\n      name: listTitle,\r\n      items: listArr\r\n    };\r\n    instance\r\n      .post(listID, dataSent, {\r\n        cancelToken: cancelTokenSource.token,\r\n        withCredentials: true\r\n      })\r\n      .then(function(response) {\r\n        //if a new list was saved, it pulls that lists ID\r\n        if (!listID) {\r\n          setListID(response.data);\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  //tracks pending Axios calls\r\n  let pendingAxiosCalls = 0;\r\n\r\n  //tracks increases to pendingAxiosCalls\r\n  instance.interceptors.request.use(\r\n    function(config) {\r\n      pendingAxiosCalls++;\r\n      return config;\r\n    },\r\n    function(error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  //tracks decreases/resolutions of pendingAxiosCalls\r\n  instance.interceptors.response.use(\r\n    function(response) {\r\n      pendingAxiosCalls--;\r\n      return response;\r\n    },\r\n    function(error) {\r\n      pendingAxiosCalls--;\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  /*****************Side effects******************/\r\n\r\n  //Prevents a get request from being sent as this is a new list\r\n  const noFetchNeeded = useRef(listID ? false : true);\r\n\r\n  //calls fetchList on page load and only on page load\r\n  useEffect(() => {\r\n    if (!noFetchNeeded.current) {\r\n      fetchList();\r\n    }\r\n  }, []);\r\n\r\n  //Ignores first two changes for the next side effect\r\n  const skipFirst2Renders = useRef(2);\r\n\r\n  //calls postList whenever listArr or listTitle is changed.\r\n  //ignores the first 2 changes, which are: 1. on page load and 2. When listArr is populated from fetching the DB.\r\n  useEffect(() => {\r\n    if (props.save) {\r\n      if (skipFirst2Renders.current > 0) {\r\n        skipFirst2Renders.current--;\r\n        if (noFetchNeeded.current) {\r\n          skipFirst2Renders.current--;\r\n        }\r\n        //changes the class name of the submit box and button to empty to display them after your list has finished loading\r\n        if (skipFirst2Renders.current === 0) {\r\n          setSubmitClass();\r\n        }\r\n      } else {\r\n        //ensures only 1 axios call is ever pending at any time.\r\n        if (pendingAxiosCalls === 1) {\r\n          cancelTokenSource.cancel();\r\n          //sends most up to date axios call.\r\n          postList();\r\n        } else {\r\n          postList();\r\n        }\r\n      }\r\n    } else {\r\n      if (submitClass) {\r\n        setSubmitClass();\r\n      }\r\n    }\r\n  }, [listArr, listTitle]);\r\n\r\n  //Creates ref for our input text box to allow for autofocusing\r\n  const inputTxt = useRef(null);\r\n\r\n  //Autofocuses our input text box whenever listArr or submitClass (controls input text box class names) is changed\r\n  useEffect(() => {\r\n    inputTxt.current.focus();\r\n  }, [listArr, submitClass]);\r\n\r\n  //Creates ref for our sub item input text box to allow for autofocusing\r\n  const subItemTxt = useRef(null);\r\n\r\n  // Autofocuses our sub item input text box whenever listArr is changed\r\n  useEffect(() => {\r\n    subItemTxt.current&&subItemTxt.current.focus();\r\n  }, [listArr]);\r\n\r\n\r\n  /*****************State variable handlers/CRUD******************/\r\n\r\n  //handles changes of input text box\r\n  function handleChange(e) {\r\n    const newInput = e.target.value;\r\n    setInput(newInput);\r\n  }\r\n\r\n  //submits new item from the input text box to the array and clears text box\r\n  function handleSubmit(e) {\r\n    setListArr(prev => {\r\n      //clones the array\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //checks if a subitem text box is open, if so, it clears the text box and closes it\r\n      if (subItemInputLimiter.current){\r\n        setSubItemInput(\"\");\r\n        collapsePrevSubItemInput(prevClone);\r\n        subItemInputLimiter.current = false;\r\n        subItemInputFound.current = false;\r\n      }\r\n\r\n      // creates the new item to be added\r\n      const newListItem = {\r\n        item: input\r\n      };\r\n\r\n      //adds the item to the array\r\n      return [...prevClone, newListItem];\r\n    });\r\n    setInput(\"\");\r\n    e.preventDefault();\r\n  }\r\n\r\n  //handles changes of subitem text box\r\n  function handleSubItemChange(e) {\r\n    const newInput = e.target.value;\r\n    setSubItemInput(newInput);\r\n  }\r\n\r\n  //Adds sub item to sublist or creates new sublist\r\n  function handleSubItemSubmit(e, cumIndex) {\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to add the subitem to the specified list item\r\n      function addOrCreateSubList(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray[currIndex].items = targetArray[currIndex].items\r\n            ? [\r\n                ...targetArray[currIndex].items,\r\n                {\r\n                  item: subItemInput\r\n                }\r\n              ]\r\n            : [\r\n                {\r\n                  item: subItemInput\r\n                }\r\n              ];\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          addOrCreateSubList(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      addOrCreateSubList(prevClone, cumIndex);\r\n      return prevClone;\r\n    });\r\n    setSubItemInput(\"\");\r\n    e.preventDefault();\r\n  }\r\n\r\n  //updates the targeted list item\r\n  function handleUpdate(e, index) {\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function updateTarget(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray[currIndex].item = input;\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          updateTarget(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      updateTarget(prevClone, index);\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n    setInput(\"\");\r\n  }\r\n\r\n  //deletes selected item from array using the specified index/indices\r\n  function handleDelete(e, index) {\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function deleteTarget(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray.splice(currIndex, 1);\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          deleteTarget(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      deleteTarget(prevClone, index);\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  //changes list title\r\n  function handleTitleChange() {\r\n    setListTitle(input);\r\n    setInput(\"\");\r\n  }\r\n\r\n  //tracks if there is a subitem text input open currently\r\n  const subItemInputLimiter = useRef(false);\r\n\r\n  //breaks out of the collapsePrevSubItemInput function\r\n  const subItemInputFound = useRef(false);\r\n\r\n  //closes the previous subitem text input\r\n  function collapsePrevSubItemInput(targetArray) {\r\n    for (let i = 0; i < targetArray.length; i++) {\r\n      if (subItemInputFound.current) {\r\n        break;\r\n      } else {\r\n        if (targetArray[i].txtInput) {\r\n          targetArray[i].txtInput = false;\r\n          subItemInputFound.current = true;\r\n          break;\r\n        }\r\n        targetArray[i].items &&\r\n          targetArray[i].items.length !== 0 &&\r\n          collapsePrevSubItemInput(targetArray[i].items);\r\n      }\r\n    }\r\n  }\r\n\r\n  //opens the subitem text input under the specified list item\r\n  function showSubItemInput(e, cumIndex) {\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function locateTarget(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          setSubItemInput(\"\");\r\n          if (targetArray[currIndex].txtInput) {\r\n            targetArray[currIndex].txtInput = false;\r\n            subItemInputLimiter.current = false;\r\n          } else if (!subItemInputLimiter.current) {\r\n            targetArray[currIndex].txtInput = true;\r\n            subItemInputLimiter.current = true;\r\n          } else {\r\n            collapsePrevSubItemInput(prevClone);\r\n            subItemInputFound.current = false;\r\n            targetArray[currIndex].txtInput = true;\r\n          }\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          locateTarget(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      locateTarget(prevClone, cumIndex);\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  //displays all list and sublist items recursively.\r\n  //Once an item is displayed, all subitems are then displayed. This process continues\r\n  //until all subitems of subitems are displayed. Then the next list item is displayed.\r\n  function displayNewList(newList, parentIndex) {\r\n    const parInd = parentIndex ? parentIndex : [];\r\n    return (\r\n      <ul>\r\n        {newList.map((object, index) => {\r\n          return (\r\n            <div>\r\n              <ListItem\r\n                content={object.item}\r\n                key={[...parInd, index]}\r\n                cumIndex={[...parInd, index]}\r\n                handSubI={showSubItemInput}\r\n                handUpda={handleUpdate}\r\n                handDele={handleDelete}\r\n              />\r\n              {object.items &&\r\n                object.items.length !== 0 &&\r\n                displayNewList(object.items, [...parInd, index])}\r\n              {object.txtInput && (\r\n                <form>\r\n                  <input\r\n                    className={submitClass}\r\n                    onChange={handleSubItemChange}\r\n                    type=\"text\"\r\n                    name=\"subItemInput\"\r\n                    value={subItemInput}\r\n                    ref = {subItemTxt}\r\n                  />\r\n                  <button\r\n                    className={submitClass}\r\n                    onClick={e => {\r\n                      handleSubItemSubmit(e, [...parInd, index]);\r\n                    }}\r\n                    type=\"submit\"\r\n                    name=\"submitButton\"\r\n                  >\r\n                    <i className=\"fas fa-plus-circle\"></i>\r\n                  </button>\r\n                </form>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  /*****************Return value******************/\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"vis\">\r\n        {listTitle ? listTitle : \"New\"} list\r\n        <button\r\n          className=\"invis\"\r\n          onClick={handleTitleChange}\r\n          type=\"submit\"\r\n          name=\"titleButton\"\r\n        >\r\n          Change title\r\n        </button>\r\n      </h3>\r\n      {displayNewList(listArr)}\r\n      <form>\r\n        <input\r\n          className={submitClass}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          name=\"userInput\"\r\n          value={input}\r\n          ref={inputTxt}\r\n        />\r\n        <button\r\n          className={submitClass}\r\n          onClick={handleSubmit}\r\n          type=\"submit\"\r\n          name=\"submitButton\"\r\n        >\r\n          <i className=\"fas fa-plus-circle\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport List from \"../components/List\";\r\n\r\nexport default function CreateList(props) {\r\n  return (\r\n    <div>\r\n      <List listId={props.location.listId} save={props.location.save} />\r\n      <br />\r\n      <Link to=\"/\">\r\n        <button variant=\"outlined\">Click here to return to the homepage</button>\r\n      </Link>\r\n      {props.location.save && (\r\n        <Link to=\"/MyLists\">\r\n          <button variant=\"outlined\">Click here to return to your lists</button>\r\n        </Link>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {Switch, Route} from \"react-router-dom\";\r\n\r\nimport Home from \"../pages/Home\";\r\nimport MyLists from \"../pages/MyLists\";\r\nimport CreateList from \"../pages/CreateList\";\r\n// import Settings from \"../pages/Settings\";\r\n// import About from \"../pages/About\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home}></Route>\r\n      <Route exact path=\"/MyLists\" component={MyLists}></Route>\r\n      <Route exact path=\"/CreateList\" component={CreateList}></Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n\r\n// <Route exact path=\"/Settings\" component={Settings}></Route>\r\n// <Route exact path=\"/About\" component={About}></Route>\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Main from \"./components/Main\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Main />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}