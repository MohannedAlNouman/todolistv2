{"version":3,"sources":["pages/Home.js","pages/MyLists.js","components/ListItem.js","components/List.js","pages/CreateList.js","components/Main.js","index.js"],"names":["Home","props","useState","user","setUser","instance","axios","create","baseURL","logUserOut","get","withCredentials","then","response","catch","error","console","log","useEffect","location","logout","data","Navbar","className","bg","variant","Brand","Nav","to","pathname","save","name","onClick","href","role","MyLists","userLists","setUserLists","deleteList","e","listID","target","value","delete","lists","length","map","element","index","key","listName","listId","type","ListItem","action","method","striThro","handCros","cumIndex","onDoubleClick","showInpu","content","handDele","List","input","setInput","movingInput","setMovingInput","title","listTitle","setListTitle","listArr","setListArr","undosRemaining","setUndosRemaining","redosRemaining","setRedosRemaining","submitClass","setSubmitClass","useRef","cancelTokenSource","CancelToken","source","postList","dataSent","items","post","current","cancelToken","token","pendingAxiosCalls","interceptors","request","use","config","Promise","reject","actualChange","fetchEqualizer","skipFirst2Renders","cancel","listHistory","futureListHistory","limit","deleteRedoHistory","splice","listArrClone","JSON","parse","stringify","push","shift","inputTxt","autoFocus","focus","movingInputTxt","titleTxt","closeTitleAndMovingInput","variation","edit","prevTitle","prevTitleClone","Object","assign","movingInputLimiter","prev","prevClone","a","collapsePrevMovingInput","movingInputFound","handleMovingInputChange","newInput","handleDelete","deleteTarget","targetArray","targetIndex","currIndex","preventDefault","handleCrossOut","strikeThrough","i","txtInput","editItem","showMovingInput","locateTarget","item","showTitleInput","handleTitleChange","newTitle","onChange","ref","pop","prevList","displayNewList","newList","parentIndex","parInd","object","updateTarget","handleUpdate","addOrCreateSubList","handleSubItemSubmit","newListItem","CreateList","Main","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7facf785.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {Navbar, Nav} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Home(props) {\r\n  const [user, setUser] = useState({});\r\n\r\n  //https://mohanned-todolistv2.herokuapp.com/auth\r\n  //specifies where to access the server and DB\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:3001/auth\"\r\n  });\r\n\r\n  //pulls user's saved List from DB and stores it in listArr\r\n  function fetchUser() {\r\n    instance\r\n      .get(\"/pullUser\", {withCredentials: true})\r\n      .then(function(response) {\r\n        setUser(response.data);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function logUserOut() {\r\n    instance\r\n      .get(\"/logout\", {withCredentials: true})\r\n      .then(function(response) {\r\n        setUser({});\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.location.logout) {\r\n      logUserOut();\r\n    } else {\r\n      fetchUser();\r\n    }\r\n  }, []);\r\n\r\n  function displayNavbar() {\r\n    return (\r\n      <Navbar className=\"myNavbar\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand>\r\n          List App <span className=\"version\">version 1.0.1</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Home\r\n          </Link>\r\n          <Link\r\n            className=\"nav-link\"\r\n            to={{\r\n              pathname: \"/CreateList\",\r\n              save: user.name ? true : false\r\n            }}\r\n          >\r\n            Create a new list\r\n          </Link>\r\n          {user.name && (\r\n            <Link className=\"nav-link\" to=\"/MyLists\">\r\n              My Lists\r\n            </Link>\r\n          )}\r\n          {user.name ? (\r\n            <Link className=\"nav-link\" onClick={logUserOut}>\r\n              Logout\r\n            </Link>\r\n          ) : (\r\n            <a\r\n              className=\"nav-link\"\r\n              ///auth/google\r\n              href=\"http://localhost:3001/auth/google\"\r\n              role=\"button\"\r\n            >\r\n              <i className=\"fab fa-google\"></i>\r\n              {\" Login with Google\"}\r\n            </a>\r\n          )}\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {displayNavbar()}\r\n      <div className=\"homePageText\">\r\n        <h2>Hello {user.name ? user.name : \"anonymous\"}.</h2>\r\n      </div>\r\n      <div className=\"homePageText\">\r\n        <h4>About this app:</h4>\r\n        <h5>\r\n          This app uses your google login to store your lists. You can access\r\n          these lists from any device as long as you're logged in to the same\r\n          account.\r\n        </h5>\r\n      </div>\r\n      <div className=\"homePageText\">\r\n        <h4>Basic list controls</h4>\r\n        <h5>\r\n          You can edit the title by clicking the edit button when you hover over\r\n          the title. Clicking a list item once crosses it out. Double clicking\r\n          an item allows you to edit it. Buttons to delete and to create\r\n          sublists appear when you hover over a list item. All items can be\r\n          submitted using the enter button.\r\n        </h5>\r\n      </div>\r\n      <div className=\"homePageText\">\r\n        <h4>What are you waiting for! Get started by logging in above.</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Navbar, Nav} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\n\r\nexport default function MyLists() {\r\n  const [user, setUser] = useState({});\r\n\r\n  const [userLists, setUserLists] = useState([]);\r\n\r\n  //https://mohanned-todolistv2.herokuapp.com\r\n  //specifies where to access the server and DB\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:3001\"\r\n  });\r\n\r\n  //pulls user's saved List from DB and stores it in listArr\r\n  function fetchUser() {\r\n    instance\r\n      .get(\"/auth/pullUser\", {withCredentials: true})\r\n      .then(function(response) {\r\n        setUser(response.data);\r\n        setUserLists(response.data.lists);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(fetchUser, []);\r\n\r\n  function deleteList(e) {\r\n    let listID = e.target.value;\r\n\r\n    instance\r\n      .delete(\"/api/\" + listID, {\r\n        withCredentials: true\r\n      })\r\n      .then(function(response) {\r\n        setUserLists(response.data);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function displayNavbar() {\r\n    return (\r\n      <Navbar className=\"myNavbar\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand>\r\n          List App <span className=\"version\">version 1.0.0</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Home\r\n          </Link>\r\n          <Link\r\n            className=\"nav-link\"\r\n            to={{\r\n              pathname: \"/CreateList\",\r\n              save: user.name ? true : false\r\n            }}\r\n          >\r\n            Create a new list\r\n          </Link>\r\n          {user.name && (\r\n            <Link className=\"nav-link\" to=\"/MyLists\">\r\n              My Lists\r\n            </Link>\r\n          )}\r\n          {user.name ? (\r\n            <Link\r\n              className=\"nav-link\"\r\n              to={{\r\n                pathname: \"/\",\r\n                logout: true\r\n              }}\r\n            >\r\n              Logout\r\n            </Link>\r\n          ) : (\r\n            <a\r\n              className=\"nav-link\"\r\n              ///auth/google\r\n              href=\"http://localhost:3001/auth/google\"\r\n              role=\"button\"\r\n            >\r\n              <i className=\"fab fa-google\"></i>\r\n              {\" Login with Google\"}\r\n            </a>\r\n          )}\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n\r\n  function displayListOfLists() {\r\n    return userLists.length > 0 ? (\r\n      <div>\r\n        {userLists.map((element, index) => {\r\n          return (\r\n            <div className=\"listItems\" key={index}>\r\n              <h5 className=\"vis\">\r\n                {element.listName ? element.listName + \" list\" : \"Unnamed list\"}\r\n                <Link\r\n                  className=\"invis\"\r\n                  to={{\r\n                    pathname: \"/CreateList\",\r\n                    listId: element.listId,\r\n                    save: true\r\n                  }}\r\n                >\r\n                  <button className=\"invis myButton\">\r\n                    <i className=\"fas fa-edit\"></i>\r\n                  </button>\r\n                </Link>\r\n                <button\r\n                  className=\"invis myButton\"\r\n                  value={element.listId}\r\n                  onClick={deleteList}\r\n                  type=\"submit\"\r\n                  name=\"deleteButton\"\r\n                >\r\n                  X\r\n                </button>\r\n              </h5>\r\n            </div>\r\n          );\r\n        })}\r\n        <h6 className=\"myList\">*Hover over an item to edit/delete it.*</h6>\r\n      </div>\r\n    ) : (\r\n      user.name && (\r\n        <h5 className=\"myList\">\r\n          You don't have any lists yet! Get started by clicking 'Create a new\r\n          list\" above!\r\n        </h5>\r\n      )\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {displayNavbar()}\r\n      <h4 className=\"myList\">\r\n        {user.name\r\n          ? user.name + \"'s lists:\"\r\n          : \"Oh no, you were logged out! Log in again to access your lists\"}\r\n      </h4>\r\n      {displayListOfLists()}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction ListItem(props) {\r\n  return (\r\n    <form action=\"\" method=\"\">\r\n      <li className=\"vis\">\r\n        <div //moves text box to current item to update\r\n          className={\"listItemText \" + props.striThro}\r\n          onClick={e => {\r\n            props.handCros(e, props.cumIndex);\r\n          }}\r\n          onDoubleClick={e => {\r\n            props.showInpu(e, props.cumIndex, 0);\r\n          }}\r\n        >\r\n          {props.content}\r\n        </div>\r\n        <button //moves text box below current item for subitems\r\n          className=\"invis editBtn myButton\"\r\n          onClick={e => {\r\n            props.showInpu(e, props.cumIndex, 1);\r\n          }}\r\n          type=\"submit\"\r\n          name=\"createTxtInput\"\r\n        >\r\n          <i className=\"fas fa-indent\"></i>\r\n        </button>\r\n        <button //deletes current item\r\n          className=\"invis editBtn myButton\"\r\n          onClick={e => {\r\n            props.handDele(e, props.cumIndex);\r\n          }}\r\n          type=\"submit\"\r\n          name=\"deleteButton\"\r\n        >\r\n          <i className=\"fas fa-times-circle\"></i>\r\n        </button>\r\n      </li>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import React, {useState, useEffect, useRef} from \"react\";\r\nimport axios from \"axios\";\r\nimport ListItem from \"./ListItem\";\r\n\r\n//displays the list of items and subitems\r\nexport default function List(props) {\r\n  /*****************State Variables******************/\r\n\r\n  //tracks what's in the input text box\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  //tracks what's in the update/subitem text box\r\n  const [movingInput, setMovingInput] = useState(\"\");\r\n\r\n  //tracks the lists title\r\n  const [listTitle, setListTitle] = useState({title: \"\"});\r\n\r\n  //stores user's items in an array\r\n  const [listArr, setListArr] = useState([]);\r\n\r\n  //stores how many undo's are stored in listHistory\r\n  const [undosRemaining, setUndosRemaining] = useState(0);\r\n\r\n  //stores how many undo's are stored in listHistory\r\n  const [redosRemaining, setRedosRemaining] = useState(0);\r\n\r\n  //reveals the submit text box and button when the list has finished loading.\r\n  //this is done to prevent possible loss of sync between the client list and the DB list during initial loading of webpage\r\n  const [submitClass, setSubmitClass] = useState(\"invis\");\r\n\r\n  /*****************Ajax requests******************/\r\n\r\n  //contains the list ID if available to save/update the list\r\n  const listID = useRef(props.listId ? props.listId : \"\");\r\n\r\n  //https://mohanned-todolistv2.herokuapp.com/api/\r\n  //specifies where to access the server to route to the DB\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:3001/api/\"\r\n  });\r\n\r\n  //pulls user's saved List from DB and stores it in listArr\r\n  function fetchList() {\r\n    instance\r\n      .get(listID.current, {\r\n        withCredentials: true\r\n      })\r\n      .then(function(response) {\r\n        actualChange.current = true;\r\n        setListArr([...response.data.items]);\r\n        setListTitle({\r\n          title: response.data.name\r\n        });\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  //Allows us to prevent multiple post requests from occuring simultaneously\r\n  const cancelTokenSource = axios.CancelToken.source();\r\n\r\n  //stores the user's list in the DB\r\n  function postList() {\r\n    let dataSent = {\r\n      name: listTitle.title,\r\n      items: listArr\r\n    };\r\n\r\n    instance\r\n      .post(listID.current, dataSent, {\r\n        cancelToken: cancelTokenSource.token,\r\n        withCredentials: true\r\n      })\r\n      .then(function(response) {\r\n        //if a new list was saved, it pulls that lists ID\r\n        if (!listID.current) {\r\n          listID.current = response.data;\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  //tracks pending Axios calls\r\n  const pendingAxiosCalls = useRef(0);\r\n\r\n  //tracks increases to pendingAxiosCalls\r\n  instance.interceptors.request.use(\r\n    function(config) {\r\n      pendingAxiosCalls.current++;\r\n      return config;\r\n    },\r\n    function(error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  //tracks decreases/resolutions of pendingAxiosCalls\r\n  instance.interceptors.response.use(\r\n    function(response) {\r\n      pendingAxiosCalls.current--;\r\n      return response;\r\n    },\r\n    function(error) {\r\n      pendingAxiosCalls.current--;\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  /*****************Side effects******************/\r\n\r\n  //calls fetchList on page load and only on page load if a listID is present\r\n  useEffect(() => {\r\n    if (listID.current) {\r\n      fetchList();\r\n      fetchEqualizer.current = true;\r\n    }\r\n  }, []);\r\n\r\n  //Ignores first two changes for the next side effect\r\n  const skipFirst2Renders = useRef(2);\r\n\r\n  //calls postList whenever listArr or listTitle is changed.\r\n  //ignores the first 2 changes, which are: 1. on page load and 2. When listArr is populated from fetching the DB.\r\n  //If props.save is set to false, the post request is skipped\r\n  useEffect(() => {\r\n    if (props.save) {\r\n      if (skipFirst2Renders.current > 0) {\r\n        skipFirst2Renders.current--;\r\n        if (!listID.current) {\r\n          skipFirst2Renders.current = 0;\r\n        }\r\n        //changes the class name of the submit box and button to empty to display them after your list has finished loading\r\n        if (skipFirst2Renders.current === 0) {\r\n          setSubmitClass();\r\n        }\r\n      } else {\r\n        //ensures only 1 axios call is ever pending at any time.\r\n        if (pendingAxiosCalls.current >= 1) {\r\n          cancelTokenSource.cancel(\"post cancelled\");\r\n          //sends most up to date axios call.\r\n          postList();\r\n        } else {\r\n          postList();\r\n        }\r\n      }\r\n    } else {\r\n      if (submitClass) {\r\n        setSubmitClass();\r\n      }\r\n    }\r\n  }, [listArr, listTitle]);\r\n\r\n  //tracks the history of changes to the list\r\n  const listHistory = useRef([]);\r\n\r\n  //tracks the history of changes to the list\r\n  const futureListHistory = useRef([]);\r\n\r\n  //Specifies how many changes to store\r\n  const limit = useRef(10);\r\n\r\n  //equalizes the number of undos for fetched lists and newly created lists\r\n  const fetchEqualizer = useRef(false);\r\n\r\n  //tracks changes to items and subitems\r\n  //ignores changes to other key values\r\n  const actualChange = useRef(true);\r\n\r\n  //if a change to the list is made, any stored future lists are deleted\r\n  const deleteRedoHistory = useRef(true);\r\n\r\n  //Takes a snapshot of the list whenever a change is made and stores that value\r\n  useEffect(() => {\r\n    if (actualChange.current) {\r\n      actualChange.current = false;\r\n\r\n      if (redosRemaining > 0 && deleteRedoHistory.current) {\r\n        futureListHistory.current.splice(0, futureListHistory.current.length);\r\n        setRedosRemaining(futureListHistory.current.length);\r\n      }\r\n\r\n      deleteRedoHistory.current = true;\r\n\r\n      //creates a deep clone of listArr\r\n      const listArrClone = JSON.parse(JSON.stringify(listArr));\r\n\r\n      //adds the cloned list to list history\r\n      listHistory.current.push(listArrClone);\r\n\r\n      //equalizes the number of undos for fetched lists and newly created lists\r\n      if (fetchEqualizer.current && listHistory.current.length > 1) {\r\n        listHistory.current.splice(0, 1);\r\n        fetchEqualizer.current = false;\r\n      }\r\n\r\n      //caps off list history to the past <limit> changes\r\n      if (listHistory.current.length >= limit.current + 2) {\r\n        listHistory.current.shift();\r\n      }\r\n      setUndosRemaining(listHistory.current.length - 1);\r\n    }\r\n  }, [listArr]);\r\n\r\n  //Creates ref for our input text box to allow for autofocusing\r\n  const inputTxt = useRef(null);\r\n\r\n  //Only autofocuses after a root list item is added\r\n  const autoFocus = useRef(true);\r\n\r\n  //Autofocuses our input text box whenever a root list item is added to our list\r\n  useEffect(() => {\r\n    if (!submitClass) {\r\n      if (autoFocus.current) {\r\n        inputTxt.current.focus();\r\n        autoFocus.current = false;\r\n      }\r\n    }\r\n  }, [listArr, submitClass]);\r\n\r\n  //Creates ref for our moving input to allow for autofocusing\r\n  const movingInputTxt = useRef(null);\r\n\r\n  //Autofocuses our moving input whenever a subitem is created\r\n  useEffect(() => {\r\n    movingInputTxt.current && movingInputTxt.current.focus();\r\n  }, [listArr]);\r\n\r\n  const titleTxt = useRef(null);\r\n\r\n  //Autofocuses our moving input whenever a subitem is created\r\n  useEffect(() => {\r\n    titleTxt.current && titleTxt.current.focus();\r\n  }, [listTitle]);\r\n\r\n  /*****************State variable handlers/CRUD******************/\r\n\r\n  //closes the title text box and the moving input if they are open\r\n  function closeTitleAndMovingInput(variation) {\r\n    if (variation === 1 || variation === 3) {\r\n      //closes out of title edit box\r\n      if (listTitle.edit) {\r\n        setListTitle(prevTitle => {\r\n          const prevTitleClone = Object.assign({}, prevTitle);\r\n          prevTitleClone.edit = false;\r\n          return prevTitleClone;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (variation === 2 || variation === 3) {\r\n      //checks if a moving input is open, if so, it clears the text box and closes it\r\n      if (movingInputLimiter.current) {\r\n        setListArr(prev => {\r\n          const prevClone = prev.map(a => Object.assign({}, a));\r\n          setMovingInput(\"\");\r\n          collapsePrevMovingInput(prevClone);\r\n          movingInputLimiter.current = false;\r\n          movingInputFound.current = false;\r\n          return prevClone;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  //handles changes of input text box\r\n  function handleChange(e) {\r\n    const newInput = e.target.value;\r\n    setInput(newInput);\r\n  }\r\n\r\n  //submits new item from the input text box to the list array and clears the text box\r\n  function handleSubmit(e) {\r\n    //autofocuses the input text box\r\n    autoFocus.current = true;\r\n\r\n    //saves change to the list history array\r\n    actualChange.current = true;\r\n\r\n    closeTitleAndMovingInput(3);\r\n\r\n    setListArr(prev => {\r\n      //creates a shallow clone of the array\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      // creates the new item to be added\r\n      const newListItem = {\r\n        item: input\r\n      };\r\n\r\n      //adds the item to the array\r\n      return [...prevClone, newListItem];\r\n    });\r\n    setInput(\"\");\r\n    e.preventDefault();\r\n  }\r\n\r\n  //handles changes of the moving input text box\r\n  function handleMovingInputChange(e) {\r\n    const newInput = e.target.value;\r\n    setMovingInput(newInput);\r\n  }\r\n\r\n  //updates the targeted item\r\n  function handleUpdate(e, index) {\r\n    //saves change to the list history array\r\n    actualChange.current = true;\r\n\r\n    closeTitleAndMovingInput(1);\r\n\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function updateTarget(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray[currIndex].item = movingInput;\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          updateTarget(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      updateTarget(prevClone, index);\r\n\r\n      closeTitleAndMovingInput(2);\r\n\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  //Adds a sub item to the sublist or creates new sublist\r\n  function handleSubItemSubmit(e, cumIndex) {\r\n    //saves change to the list history array\r\n    actualChange.current = true;\r\n\r\n    closeTitleAndMovingInput(1);\r\n\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to add the subitem to the specified list item\r\n      function addOrCreateSubList(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray[currIndex].items = targetArray[currIndex].items\r\n            ? [\r\n                ...targetArray[currIndex].items,\r\n                {\r\n                  item: movingInput\r\n                }\r\n              ]\r\n            : [\r\n                {\r\n                  item: movingInput\r\n                }\r\n              ];\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          addOrCreateSubList(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      addOrCreateSubList(prevClone, cumIndex);\r\n      return prevClone;\r\n    });\r\n    setMovingInput(\"\");\r\n    e.preventDefault();\r\n  }\r\n\r\n  //deletes selected item from array using the specified index/indices\r\n  function handleDelete(e, index) {\r\n    //saves change to the list history array\r\n    actualChange.current = true;\r\n\r\n    closeTitleAndMovingInput(3);\r\n\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function deleteTarget(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray.splice(currIndex, 1);\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          deleteTarget(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      deleteTarget(prevClone, index);\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  //crosses out the selected list item\r\n  function handleCrossOut(e, cumIndex) {\r\n    //saves change to the list history array\r\n    actualChange.current = true;\r\n\r\n    closeTitleAndMovingInput(3);\r\n\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function strikeThrough(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n        if (targetIndex.length === 1) {\r\n          targetArray[currIndex].strikeThrough = !targetArray[currIndex]\r\n            .strikeThrough;\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          strikeThrough(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      strikeThrough(prevClone, cumIndex);\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  //tracks if there is a moving input open currently\r\n  const movingInputLimiter = useRef(false);\r\n\r\n  //breaks out of the collapse moving input function below\r\n  const movingInputFound = useRef(false);\r\n\r\n  //closes the previous moving input\r\n  function collapsePrevMovingInput(targetArray) {\r\n    for (let i = 0; i < targetArray.length; i++) {\r\n      if (movingInputFound.current) {\r\n        break;\r\n      } else {\r\n        if (targetArray[i].txtInput) {\r\n          targetArray[i].txtInput = false;\r\n          movingInputFound.current = true;\r\n          break;\r\n        } else if (targetArray[i].editItem) {\r\n          targetArray[i].editItem = false;\r\n          movingInputFound.current = true;\r\n          break;\r\n        }\r\n        //recursively calls self to check through all items and subitems\r\n        targetArray[i].items &&\r\n          targetArray[i].items.length !== 0 &&\r\n          collapsePrevMovingInput(targetArray[i].items);\r\n      }\r\n    }\r\n  }\r\n\r\n  //opens the moving input to the relevant position.\r\n  //for updates, the input replaces the item.\r\n  //for sublists, the input is placed below the root item\r\n  function showMovingInput(e, cumIndex, variation) {\r\n    setListArr(prev => {\r\n      const prevClone = prev.map(a => Object.assign({}, a));\r\n\r\n      //recursive function used to reach the exact list item\r\n      function locateTarget(targetArray, targetIndex) {\r\n        const currIndex = targetIndex[0];\r\n\r\n        closeTitleAndMovingInput(1);\r\n\r\n        if (targetIndex.length === 1) {\r\n          if (variation === 0) {\r\n            //Replaces item with moving input to update the item\r\n            setMovingInput(targetArray[currIndex].item); //populates moving input with previous item value\r\n            if (targetArray[currIndex].editItem) {\r\n              //closing the only movable input thats open\r\n              targetArray[currIndex].editItem = false;\r\n              movingInputLimiter.current = false;\r\n            } else if (!movingInputLimiter.current) {\r\n              //opening an input when none are currently open\r\n              targetArray[currIndex].editItem = true;\r\n              movingInputLimiter.current = true;\r\n            } else {\r\n              //closing the only other input open and opening one up at the target location\r\n              collapsePrevMovingInput(prevClone);\r\n              movingInputFound.current = false;\r\n              targetArray[currIndex].editItem = true;\r\n            }\r\n          } else if (variation === 1) {\r\n            //places moving input below root item to allow for subitems\r\n            setMovingInput(\"\"); //clears moving input before its made visible\r\n            if (targetArray[currIndex].txtInput) {\r\n              //closing the only movable input thats open\r\n              targetArray[currIndex].txtInput = false;\r\n              movingInputLimiter.current = false;\r\n            } else if (!movingInputLimiter.current) {\r\n              //opening an input when none are currently open\r\n              targetArray[currIndex].txtInput = true;\r\n              movingInputLimiter.current = true;\r\n            } else {\r\n              //closing the only other input open and opening one up at the target location\r\n              collapsePrevMovingInput(prevClone);\r\n              movingInputFound.current = false;\r\n              targetArray[currIndex].txtInput = true;\r\n            }\r\n          }\r\n        } else {\r\n          targetIndex.splice(0, 1);\r\n          locateTarget(targetArray[currIndex].items, targetIndex);\r\n        }\r\n      }\r\n\r\n      //calls the recursive function\r\n      locateTarget(prevClone, cumIndex);\r\n      return prevClone;\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  function showTitleInput() {\r\n    setListTitle(prevTitle => {\r\n      const prevTitleClone = Object.assign({}, prevTitle);\r\n      prevTitleClone.edit = true;\r\n      return prevTitleClone;\r\n    });\r\n\r\n    closeTitleAndMovingInput(2);\r\n  }\r\n\r\n  //changes the list title\r\n  function handleTitleChange(e) {\r\n    const newTitle = e.target.value;\r\n    setListTitle(prevTitle => {\r\n      const prevTitleClone = Object.assign({}, prevTitle);\r\n      prevTitleClone.title = newTitle;\r\n      return prevTitleClone;\r\n    });\r\n  }\r\n\r\n  function undo() {\r\n    if (undosRemaining > 0) {\r\n      actualChange.current = true;\r\n      deleteRedoHistory.current = false;\r\n\r\n      setListArr(() => {\r\n        futureListHistory.current.push(listHistory.current.pop());\r\n        setRedosRemaining(futureListHistory.current.length);\r\n\r\n        const prevList = listHistory.current.pop();\r\n        collapsePrevMovingInput(prevList);\r\n        movingInputLimiter.current = false;\r\n        movingInputFound.current = false;\r\n        return prevList;\r\n      });\r\n    }\r\n  }\r\n\r\n  function redo() {\r\n    if (redosRemaining > 0) {\r\n      actualChange.current = true;\r\n      deleteRedoHistory.current = false;\r\n\r\n      setListArr(() => {\r\n        const prevList = futureListHistory.current.pop();\r\n        setRedosRemaining(futureListHistory.current.length);\r\n\r\n        //removes any open moving inputs\r\n        collapsePrevMovingInput(prevList);\r\n        movingInputLimiter.current = false;\r\n        movingInputFound.current = false;\r\n        return prevList;\r\n      });\r\n    }\r\n  }\r\n\r\n  //displays all list and sublist items recursively.\r\n  //Once an item is displayed, all subitems are then displayed. This process continues\r\n  //until all subitems of subitems are displayed. Then the next list item is displayed.\r\n  function displayNewList(newList, parentIndex) {\r\n    const parInd = parentIndex ? parentIndex : [];\r\n    return (\r\n      <ul className=\"listBox\">\r\n        {newList.map((object, index) => {\r\n          return (\r\n            <div>\r\n              {//if the update function is called, the moving input replaces the list item\r\n              object.editItem ? (\r\n                <li>\r\n                  <form>\r\n                    <input\r\n                      className={submitClass + \" textInput\"}\r\n                      onChange={handleMovingInputChange}\r\n                      type=\"text\"\r\n                      name=\"movingInput\"\r\n                      value={movingInput}\r\n                      ref={movingInputTxt}\r\n                    />\r\n                    <button\r\n                      className={submitClass + \" myButton\"}\r\n                      onClick={e => {\r\n                        handleUpdate(e, [...parInd, index]);\r\n                      }}\r\n                      type=\"submit\"\r\n                      name=\"editButton\"\r\n                    >\r\n                      <i className=\"fas fa-plus-circle\"></i>\r\n                    </button>\r\n                  </form>\r\n                </li>\r\n              ) : (\r\n                //otherwise the list item is shown\r\n                <ListItem\r\n                  striThro={object.strikeThrough && \"strikeThrough\"}\r\n                  content={object.item}\r\n                  key={[...parInd, index]}\r\n                  cumIndex={[...parInd, index]}\r\n                  showInpu={showMovingInput}\r\n                  handDele={handleDelete}\r\n                  handCros={handleCrossOut}\r\n                />\r\n              )}\r\n              {//displays all subitems below the root list item\r\n              object.items &&\r\n                object.items.length !== 0 &&\r\n                displayNewList(object.items, [...parInd, index])}\r\n              {//if the sub item function is called, a moving input is placed below the last subitem\r\n              object.txtInput && (\r\n                <form>\r\n                  <input\r\n                    className={submitClass + \" textInput\"}\r\n                    onChange={handleMovingInputChange}\r\n                    type=\"text\"\r\n                    name=\"movingInput\"\r\n                    value={movingInput}\r\n                    ref={movingInputTxt}\r\n                  />\r\n                  <button\r\n                    className={submitClass + \" myButton\"}\r\n                    onClick={e => {\r\n                      handleSubItemSubmit(e, [...parInd, index]);\r\n                    }}\r\n                    type=\"submit\"\r\n                    name=\"subItemButton\"\r\n                  >\r\n                    <i className=\"fas fa-plus-circle\"></i>\r\n                  </button>\r\n                </form>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  function displayTitle() {\r\n    return listTitle.edit ? (\r\n      <form>\r\n        <input\r\n          className=\"textInput listTitle\"\r\n          onChange={handleTitleChange}\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={listTitle.title}\r\n          ref={titleTxt}\r\n        />\r\n        {\" list \"}\r\n        <button\r\n          className=\"myButton\"\r\n          onClick={() => {\r\n            closeTitleAndMovingInput(1);\r\n          }}\r\n          type=\"submit\"\r\n          name=\"changeTitle\"\r\n        >\r\n          <i className=\"fas fa-plus-circle\"></i>\r\n        </button>\r\n      </form>\r\n    ) : (\r\n      <h3 className=\"vis listTitle\">\r\n        {listTitle.title\r\n          ? listTitle.title + \" list \"\r\n          : \"Unnamed list (hover over to change)\"}\r\n        <button\r\n          className=\"invis myButton\"\r\n          onClick={showTitleInput}\r\n          type=\"submit\"\r\n          name=\"changeTitle\"\r\n        >\r\n          <i className=\"fas fa-edit\"></i>\r\n        </button>\r\n      </h3>\r\n    );\r\n  }\r\n\r\n  /*****************Return value******************/\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      {displayTitle()}\r\n      <button\r\n        className={submitClass + \" undoBtn myButton\"}\r\n        onClick={undo}\r\n        type=\"submit\"\r\n        name=\"undoButton\"\r\n      >\r\n        <i className=\"fas fa-undo\"></i>\r\n      </button>\r\n      {\" x \" + undosRemaining + \"  \"}\r\n      <button\r\n        className={submitClass + \" redoBtn myButton\"}\r\n        onClick={redo}\r\n        type=\"submit\"\r\n        name=\"redoButton\"\r\n      >\r\n        <i className=\"fas fa-redo\"></i>\r\n      </button>\r\n      {\" x \" + redosRemaining}\r\n      {displayNewList(listArr)}\r\n      <form>\r\n        <input\r\n          className={submitClass + \" textInput\"}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          name=\"userInput\"\r\n          value={input}\r\n          ref={inputTxt}\r\n        />\r\n        <button\r\n          className={submitClass + \" myButton\"}\r\n          onClick={handleSubmit}\r\n          type=\"submit\"\r\n          name=\"submitButton\"\r\n        >\r\n          <i className=\"fas fa-plus-circle\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Navbar, Nav} from \"react-bootstrap\";\r\nimport List from \"../components/List\";\r\n\r\nexport default function CreateList(props) {\r\n  function displayNavbar() {\r\n    return (\r\n      <Navbar className=\"myNavbar\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand>\r\n          List App <span className=\"version\">version 1.0.0</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Home\r\n          </Link>\r\n          <Link\r\n            className=\"nav-link\"\r\n            to={{\r\n              pathname: \"/CreateList\",\r\n              save: props.location.save ? true : false\r\n            }}\r\n          >\r\n            Create a new list\r\n          </Link>\r\n          {props.location.save && (\r\n            <Link className=\"nav-link\" to=\"/MyLists\">\r\n              My Lists\r\n            </Link>\r\n          )}\r\n          {props.location.save ? (\r\n            <Link\r\n              className=\"nav-link\"\r\n              to={{\r\n                pathname: \"/\",\r\n                logout: true\r\n              }}\r\n            >\r\n              Logout\r\n            </Link>\r\n          ) : (\r\n            <a\r\n              className=\"nav-link\"\r\n              ///auth/google\r\n              href=\"http://localhost:3001/auth/google\"\r\n              role=\"button\"\r\n            >\r\n              <i className=\"fab fa-google\"></i>\r\n              {\" Login with Google\"}\r\n            </a>\r\n          )}\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {displayNavbar()}\r\n      <List listId={props.location.listId} save={props.location.save} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {Switch, Route} from \"react-router-dom\";\r\n\r\nimport Home from \"../pages/Home\";\r\nimport MyLists from \"../pages/MyLists\";\r\nimport CreateList from \"../pages/CreateList\";\r\n// import Settings from \"../pages/Settings\";\r\n// import About from \"../pages/About\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home}></Route>\r\n      <Route exact path=\"/MyLists\" component={MyLists}></Route>\r\n      <Route exact path=\"/CreateList\" component={CreateList}></Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n\r\n// <Route exact path=\"/Settings\" component={Settings}></Route>\r\n// <Route exact path=\"/About\" component={About}></Route>\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Main from \"./components/Main\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Main />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}