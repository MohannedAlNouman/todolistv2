{"version":3,"sources":["pages/Home.js","pages/MyLists.js","components/ListItem.js","components/List.js","pages/CreateList.js","components/Main.js","index.js"],"names":["Home","useState","user","setUser","instance","axios","create","baseURL","useEffect","get","withCredentials","then","response","data","catch","error","console","log","name","className","onClick","type","href","role","to","variant","pathname","save","MyLists","lists","userLists","setUserLists","deleteList","e","listID","target","value","delete","length","map","element","index","listName","listId","ListItem","props","action","method","content","handUpda","cumIndex","handDele","handSubI","List","input","setInput","listArr","setListArr","listTitle","setListTitle","setListID","submitClass","setSubmitClass","source","CancelToken","postList","dataSent","items","post","cancelToken","token","pendingAxiosCalls","interceptors","request","use","config","Promise","reject","noFetchNeeded","useRef","current","initial2Renders","cancel","inputTxt","handleUpdate","prev","prevClone","a","Object","assign","updateTarget","targetArray","targetIndex","currIndex","item","splice","preventDefault","handleDelete","deleteTarget","handleSubItem","addOrCreateSubList","focus","displayNewList","newList","parentIndex","parInd","object","key","onChange","newInput","ref","newListItem","CreateList","location","Main","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"sNAIe,SAASA,IAAO,IAAD,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,KAItBC,EAAWC,IAAMC,OAAO,CAACC,QAAS,+BAyBxC,OAFAC,qBApBA,WACEJ,EAASK,IAAI,YAAa,CAAEC,iBAAkB,IAC7CC,MAAK,SAAUC,GACdT,EAAQS,EAASC,SAElBC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,QAcK,IAEd,6BACP,oKACA,uFACA,qCAAWb,EAAKgB,KAAKhB,EAAKgB,KAAK,YAA/B,wCAEA,yBAAKC,UAAU,YACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,aACXjB,EAAKgB,KAAM,4BAAQE,QApB3B,WACEhB,EAASK,IAAI,UAAW,CAAEC,iBAAkB,IAC3CC,MAAK,SAAUC,GACdT,EAAQ,OAETW,OAAM,SAAUC,GACfC,QAAQC,IAAIF,OAcgCI,UAAU,gBAAgBE,KAAK,UAA5D,WACQ,uBAAIF,UAAU,gBAAgBG,KAAK,oCAAoCC,KAAK,UAC/F,uBAAGJ,UAAU,kBADM,yBAOzB,6BAEEjB,EAAKgB,KAAM,kBAAC,IAAD,CAAMC,UAAYjB,EAAKgB,KAAM,GAAG,QAASM,GAAG,YACvD,4BAAQC,QAAQ,YAAhB,kCAEiB,kBAAC,IAAD,CAAMD,GAAI,CACzBE,SAAU,cACVC,MAAM,IAEN,4BAAQF,QAAQ,YAAhB,2GCtDO,SAASG,IAAU,IAAD,EACP3B,mBAAS,CAAC4B,MAAO,KADV,mBACxB3B,EADwB,KAClBC,EADkB,OAGGF,mBAAS,CAAC,KAHb,mBAGxB6B,EAHwB,KAGbC,EAHa,KAMzB3B,EAAWC,IAAMC,OAAO,CAACC,QAAS,0BAiBxC,SAASyB,EAAWC,GAClB,IAAIC,EAASD,EAAEE,OAAOC,MAEpBhC,EAASiC,OAAO,QAAQH,EAAQ,CAC9BxB,iBAAiB,IAElBC,MAAK,SAAUC,GACdmB,EAAanB,EAASC,SAEvBC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAIlB,OAjBAP,qBAXA,WACEJ,EAASK,IAAI,iBAAkB,CAAEC,iBAAkB,IAClDC,MAAK,SAAUC,GACdT,EAAQS,EAASC,MACjBkB,EAAanB,EAASC,KAAKgB,UAE5Bf,OAAM,SAAUC,GACfC,QAAQC,IAAIF,QAIK,IAiBd,6BACP,qCAAWb,EAAKgB,KAAKhB,EAAKgB,KAAK,YAA/B,0BAEEY,EAAUQ,OAAO,EAAGR,EAAUS,KAAI,SAACC,EAASC,GAC5C,OAAO,6BAAK,uBAAGtB,UAAU,OAAQqB,EAAQE,SAASF,EAAQE,SAAW,QAAQ,eAAjE,IAAiF,kBAAC,IAAD,CAAMvB,UAAU,QAAQK,GAAI,CACvHE,SAAU,cACViB,OAAQH,EAAQG,OAChBhB,MAAM,IACL,4BAAQF,QAAQ,YAAhB,oCAGC,4BAAQN,UAAU,QAAQiB,MAAOI,EAAQG,OAAQvB,QAASY,EAAYX,KAAK,SAASH,KAAK,gBAAzF,eAEH,yEAEH,kBAAC,IAAD,CAAMM,GAAI,CACRE,SAAU,cACVC,MAAM,IAEN,4BAAQF,QAAQ,YAAhB,qCAIF,6BACA,6BAEA,kBAAC,IAAD,CAAMD,GAAG,KACP,4BAAQC,QAAQ,YAAhB,2C,YC1DWmB,MARf,SAAkBC,GAChB,OAAO,0BAAMC,OAAO,GAAGC,OAAO,IAC9B,wBAAI5B,UAAU,OAAO0B,EAAMG,QAA3B,KAAqC,4BAAQ7B,UAAU,QAAQC,QAAS,SAACa,GAAKY,EAAMI,SAAShB,EAAGY,EAAMK,WAAY7B,KAAK,SAASH,KAAK,gBAAhG,UACrC,4BAAQC,UAAU,QAAQC,QAAS,SAACa,GAAKY,EAAMM,SAASlB,EAAGY,EAAMK,WAAY7B,KAAK,SAASH,KAAK,gBAAhG,UACA,4BAAQC,UAAU,QAAQC,QAAS,SAACa,GAAKY,EAAMO,SAASnB,EAAGY,EAAMK,WAAY7B,KAAK,SAASH,KAAK,iBAAhG,qBCDa,SAASmC,EAAKR,GAAM,MAKP5C,mBAAS,IALF,mBAK1BqD,EAL0B,KAKnBC,EALmB,OAQHtD,mBAAS,IARN,mBAQ1BuD,EAR0B,KAQjBC,EARiB,OAWCxD,mBAAS,IAXV,mBAW1ByD,EAX0B,KAWfC,EAXe,OAcL1D,mBAAU4C,EAAMF,OAAS,IAAIE,EAAMF,OAAQ,IAdtC,mBAc1BT,EAd0B,KAclB0B,EAdkB,OAkBK3D,mBAAS,SAlBd,mBAkB1B4D,EAlB0B,KAkBbC,EAlBa,KAwB3B1D,EAAWC,IAAMC,OAAO,CAACC,QAAS,8BAexC,IACMwD,EADc1D,IAAM2D,YACCD,SAG3B,SAASE,IACP,IAAIC,EAAW,CACbhD,KAAMwC,EACNS,MAAOX,GAEPpD,EAASgE,KAAKlC,EAAQgC,EAAU,CAC9BG,YAAaN,EAAOO,MACpB5D,iBAAiB,IAElBC,MAAK,SAAUC,GACdgD,EAAU,IAAIhD,EAASC,SAExBC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAKlB,IAAIwD,EAAoB,EAGxBnE,EAASoE,aAAaC,QAAQC,KAAI,SAAUC,GAExC,OADAJ,IACOI,KACN,SAAU5D,GACX,OAAO6D,QAAQC,OAAO9D,MAI1BX,EAASoE,aAAa5D,SAAS8D,KAAI,SAAU9D,GAGzC,OAFA2D,IACAvD,QAAQC,IAAI,2EAA6EsD,GAClF3D,KACN,SAAUG,GAGX,OAFAwD,IACAvD,QAAQC,IAAI,6EAA+EsD,GACpFK,QAAQC,OAAO9D,MAQ1B,IAAM+D,EAAgBC,kBAAO7C,GAG7B1B,qBAAU,WACHsE,EAAcE,SA/DnB5E,EAASK,IAAIyB,EAAQ,CAAExB,iBAAiB,IACvCC,MAAK,SAAUC,GACd6C,EAAW,YAAI7C,EAASC,KAAKsD,QAC7BR,EAAa/C,EAASC,KAAKK,SAE5BJ,OAAM,SAAUC,GACfC,QAAQC,IAAIF,QA4Db,IAGH,IAAMkE,EAAkBF,iBAAO,GAI/BvE,qBAAU,WACJqC,EAAMlB,KACJsD,EAAgBD,QAAQ,GAC1BC,EAAgBD,UACZF,EAAcE,SAChBC,EAAgBD,UAGY,IAA1BC,EAAgBD,SAClBlB,KAIsB,IAApBS,GACFvD,QAAQC,IAAI,8BACZ8C,EAAOmB,SAEPjB,KAEAA,IAIEJ,GACFC,MAGL,CAACN,EAASE,IAGb,IAAMyB,EAAWJ,iBAAO,MA2B1B,SAASK,EAAanD,EAAGQ,GACvBgB,GAAW,SAAA4B,GACT,IAAMC,EAAYD,EAAK9C,KAAI,SAAAgD,GAAC,OAAIC,OAAOC,OAAO,GAAIF,MAelD,OAZA,SAASG,EAAaC,EAAaC,GACjC,IAAMC,EAAYD,EAAY,GACH,IAAvBA,EAAYtD,OACdqD,EAAYE,GAAWC,KAAOxC,GAE9BsC,EAAYG,OAAO,EAAG,GACtBL,EAAaC,EAAYE,GAAW1B,MAAOyB,IAK/CF,CAAaJ,EAAW7C,GACjB6C,KAEXrD,EAAE+D,iBACFzC,EAAS,IAIT,SAAS0C,EAAahE,EAAGQ,GACvBgB,GAAW,SAAA4B,GACT,IAAMC,EAAYD,EAAK9C,KAAI,SAAAgD,GAAC,OAAIC,OAAOC,OAAO,GAAIF,MAelD,OAZA,SAASW,EAAaP,EAAaC,GACjC,IAAMC,EAAYD,EAAY,GACH,IAAvBA,EAAYtD,OACdqD,EAAYI,OAAOF,EAAW,IAE9BD,EAAYG,OAAO,EAAG,GACtBG,EAAaP,EAAYE,GAAW1B,MAAOyB,IAK/CM,CAAaZ,EAAW7C,GACjB6C,KAEXrD,EAAE+D,iBAIF,SAASG,EAAclE,EAAGiB,GACxBO,GAAW,SAAA4B,GACT,IAAMC,EAAYD,EAAK9C,KAAI,SAAAgD,GAAC,OAAIC,OAAOC,OAAO,GAAIF,MAelD,OAZA,SAASa,EAAmBT,EAAaC,GACvC,IAAMC,EAAYD,EAAY,GACH,IAAvBA,EAAYtD,OACdqD,EAAYE,GAAW1B,MAAQwB,EAAYE,GAAW1B,MAAvB,sBAAiCwB,EAAYE,GAAW1B,OAAxD,CAA+D,CAAC2B,KAAMxC,KAAQ,CAAC,CAACwC,KAAMxC,KAErHsC,EAAYG,OAAO,EAAG,GACtBK,EAAmBT,EAAYE,GAAW1B,MAAOyB,IAKrDQ,CAAmBd,EAAWpC,GACvBoC,KAET/B,EAAS,IACTtB,EAAE+D,iBA2BF,OAtHAxF,qBAAU,WACR2E,EAASH,QAAQqB,UAChB,CAAC7C,EAASK,IAoHN,6BACP,wBAAI1C,UAAU,OAAd,IAAsBuC,GAAoB,MAA1C,SAAsD,4BAAQvC,UAAU,QAAQC,QAxBlF,WACEuC,EAAaL,GACbC,EAAS,KAsBmGlC,KAAK,SAASH,KAAK,eAAzE,iBAfxD,SAASoF,EAAeC,EAASC,GAC/B,IAAMC,EAAUD,GAA2B,GAC3C,OAAO,4BACND,EAAQhE,KAAI,SAACmE,EAAQjE,GACpB,OAAO,6BAAK,kBAAC,EAAD,CAAUO,QAAS0D,EAAOZ,KAAMa,IAAG,sBAAMF,GAAN,CAAchE,IAAQS,SAAQ,sBAAMuD,GAAN,CAAchE,IAAQQ,SAAYmC,EAAcjC,SAAY8C,EAAc7C,SAAU+C,IAC/JO,EAAOvC,OAAiC,IAAxBuC,EAAOvC,MAAM7B,QAAegE,EAAeI,EAAOvC,MAAR,sBAAmBsC,GAAnB,CAA2BhE,UAWxF6D,CAAe9C,GAChB,8BACA,2BAAOrC,UAAW0C,EAAa+C,SAlHjC,SAAsB3E,GACpB,IAAM4E,EAAW5E,EAAEE,OAAOC,MAC1BmB,EAASsD,IAgH8CxF,KAAK,OAAOH,KAAK,YAAYkB,MAAOkB,EAAOwD,IAAK3B,IACvG,4BAAQhE,UAAW0C,EAAazC,QA7GlC,SAAsBa,GACpB,IAAM8E,EAAc,CAACjB,KAAMxC,GAC3BG,GAAW,SAAA4B,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAiB0B,OAEnBxD,EAAS,IACTtB,EAAE+D,kBAuGqD3E,KAAK,SAASH,KAAK,gBAA1E,YClQa,SAAS8F,EAAWnE,GACjC,OAAO,6BAAK,kBAACQ,EAAD,CAAMV,OAAQE,EAAMoE,SAAStE,OAAQhB,KAAMkB,EAAMoE,SAAStF,OACtE,6BAAK,kBAAC,IAAD,CAAMH,GAAG,KACZ,4BAAQC,QAAQ,YAAhB,yCAIAoB,EAAMoE,SAAStF,MAAO,kBAAC,IAAD,CAAMH,GAAG,YAC/B,4BAAQC,QAAQ,YAAhB,wCCLJ,IAUeyF,EAVF,WACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrH,IACjC,kBAAC,IAAD,CAAOmH,OAAK,EAACC,KAAK,WAAWC,UAAWzF,IACxC,kBAAC,IAAD,CAAOuF,OAAK,EAACC,KAAK,cAAcC,UAAWL,MCPjDM,IAASC,OAAO,kBAAC,IAAD,KACd,kBAAC,EAAD,OACWC,SAASC,eAAe,W","file":"static/js/main.90c593c1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\n\nexport default function Home(){\n  const [user, setUser] = useState({});\n\n  //specifies where to access the server and DB\n  const instance = axios.create({baseURL: 'http://localhost:8000/auth'});\n\n  //pulls user's saved List from DB and stores it in listArr\n  function fetchUser(){\n    instance.get(\"/pullUser\", { withCredentials : true })\n    .then(function (response) {\n      setUser(response.data);\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n  };\n\n  function logUserOut(){\n    instance.get(\"/logout\", { withCredentials : true })\n    .then(function (response) {\n      setUser({});\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n  }\n\n  useEffect(fetchUser, []);\n\n  return <div>\n  <h6>BEFORE YOU USE THIS WEBSITE, KNOW THAT I (MOHANNED AL NOUMAN) HAVE ACCESS TO ALL OF YOUR LISTS SO PLEASE DON'T POST ANYTHING PRIVATE</h6>\n  <h6>This website may contain a few (probably a lot) of bugs</h6>\n  <h2>Hello {user.name?user.name:\"anonymous\"} and welcome to Mohanned's List App!</h2>\n\n  <div className=\"col-sm-4\">\n    <div className=\"card social-block\">\n      <div className=\"card-body\">\n        {(user.name)?<button onClick={logUserOut} className=\"btn btn-block\" type='submit'>\n          Logout </button> : <a  className=\"btn btn-block\" href='http://localhost:8000/auth/google' role='button'>\n          <i className=\"fab fa-google\"></i>\n          Login with Google </a>}\n      </div>\n    </div>\n  </div>\n\n    <br />\n\n    {(user.name)?<Link className={(user.name)?\"\":\"invis\"} to=\"/MyLists\">\n      <button variant=\"outlined\">\n        Click here to view your lists\n      </button></Link>:<Link to={{\n        pathname: '/CreateList',\n        save: false\n      }}>\n        <button variant=\"outlined\">\n          Click here to create a new list (this will not be saved unless you login PRIOR to creating your list)\n        </button></Link>}\n    </div>;\n}\n","import React, {useState, useEffect} from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\n\nexport default function MyLists(){\n  const [user, setUser] = useState({lists: []});\n\n  const [userLists, setUserLists] = useState([{}]);\n\n  //specifies where to access the server and DB\n  const instance = axios.create({baseURL: 'http://localhost:8000'});\n\n  //pulls user's saved List from DB and stores it in listArr\n  function fetchUser(){\n    instance.get(\"/auth/pullUser\", { withCredentials : true })\n    .then(function (response) {\n      setUser(response.data);\n      setUserLists(response.data.lists);\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n  };\n\n  useEffect(fetchUser, []);\n\n\n  function deleteList(e){\n    let listID = e.target.value;\n\n      instance.delete(\"/api/\"+listID, {\n        withCredentials: true\n      })\n      .then(function (response) {\n        setUserLists(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return <div>\n  <h1>Hello {user.name?user.name:\"anonymous\"}, here are your lists:</h1>\n\n  {(userLists.length>0)?userLists.map((element, index)=>{\n    return <div><p className=\"vis\" >{element.listName?element.listName + \" list\":\"unnamed list\"} <Link className=\"invis\" to={{\n      pathname: '/CreateList',\n      listId: element.listId,\n      save: true\n    }}><button variant=\"outlined\">\n          Click here to access this list.\n        </button></Link>\n        <button className=\"invis\" value={element.listId} onClick={deleteList} type=\"submit\" name=\"deleteButton\">Delete</button>\n        </p></div>;\n  }):<p>You don't have any lists yet! Get started!</p>}\n\n  <Link to={{\n    pathname: '/CreateList',\n    save: true\n  }}>\n    <button variant=\"outlined\">\n      Click here to create a new list.\n    </button></Link>\n\n  <br/>\n  <br/>\n\n  <Link to=\"/\">\n    <button variant=\"outlined\">\n      Click here to return to the homepage.\n    </button></Link></div>;\n}\n","import React from 'react';\n\nfunction ListItem(props){\n  return <form action=\"\" method=\"\">\n  <li className=\"vis\">{props.content}  <button className=\"invis\" onClick={(e)=>{props.handUpda(e, props.cumIndex)}} type=\"submit\" name=\"updateButton\">Update</button>\n  <button className=\"invis\" onClick={(e)=>{props.handDele(e, props.cumIndex)}} type=\"submit\" name=\"deleteButton\">Delete</button>\n  <button className=\"invis\" onClick={(e)=>{props.handSubI(e, props.cumIndex)}} type=\"submit\" name=\"subItemButton\">Add to sublist</button></li>\n    </form>;\n}\n\nexport default ListItem;\n","import React, {useState, useEffect, useRef} from 'react';\nimport ListItem from './ListItem';\nimport axios from 'axios';\n\n//displays the list of items and subitems\nexport default function List(props){\n\n  /*****************State Variables******************/\n\n  //tracks what's in the input text box\n  const [input, setInput] = useState(\"\");\n\n  //stores user's items in an array\n  const [listArr, setListArr] = useState([]);\n\n  //changes webpage's title to match that of the user's list\n  const [listTitle, setListTitle] = useState(\"\");\n\n  //tracks what's in the input text box\n  const [listID, setListID] = useState((props.listId)?(\"/\"+props.listId):\"\");\n\n  //reveals the submit text box and button when the list has finished loading.\n  //this is done to prevent possible loss of sync between the displayed list and list on the DB during initial loading of webpage\n  const [submitClass, setSubmitClass] = useState(\"invis\");\n\n\n  /*****************Ajax requests******************/\n\n  //specifies where to access the server and DB\n  const instance = axios.create({baseURL: 'http://localhost:8000/api'});\n\n  //pulls user's saved List from DB and stores it in listArr\n  function fetchList(){\n    instance.get(listID, { withCredentials: true })\n    .then(function (response) {\n      setListArr([...response.data.items]);\n      setListTitle(response.data.name);\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n  }\n\n  //Allows us to prevent multiple post requests from occuring simultaneously\n  const CancelToken = axios.CancelToken;\n  const source = CancelToken.source();\n\n  //stores the user's list in the DB\n  function postList(){\n    let dataSent = {\n      name: listTitle,\n      items: listArr\n    }\n      instance.post(listID, dataSent, {\n        cancelToken: source.token,\n        withCredentials: true\n      })\n      .then(function (response) {\n        setListID(\"/\"+response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    }\n\n  //tracks pending Axios calls\n  let pendingAxiosCalls = 0;\n\n  //tracks increases to pendingAxiosCalls\n  instance.interceptors.request.use(function (config) {\n      pendingAxiosCalls++;\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    });\n\n  //tracks decreases/resolutions of pendingAxiosCalls\n  instance.interceptors.response.use(function (response) {\n      pendingAxiosCalls--;\n      console.log(\"------------  Previous request was successful. Remaining Ajax requests: \" + pendingAxiosCalls);\n      return response;\n    }, function (error) {\n      pendingAxiosCalls--;\n      console.log(\"------------  Previous request was unsuccessful. Remaining Ajax requests: \" + pendingAxiosCalls);\n      return Promise.reject(error);\n    });\n\n\n\n  /*****************Side effects******************/\n\n  //Ignores first two changes for the next side effect\n  const noFetchNeeded = useRef(listID?false:true);\n\n  //calls fetchList on page load and only on page load\n  useEffect(()=>{\n    if (!noFetchNeeded.current) {\n      fetchList();\n    }\n  }, []);\n\n  //Ignores first two changes for the next side effect\n  const initial2Renders = useRef(2);\n\n  //calls postList whenever listArr is changed.\n  //ignores the first 2 changes, which are: 1. on page load and 2. When listArr is populated from fetching the DB.\n  useEffect(()=>{\n    if (props.save){\n      if (initial2Renders.current>0){\n        initial2Renders.current--;\n        if (noFetchNeeded.current){\n          initial2Renders.current--;\n        }\n        //changes the class name of the submit box and button to empty to display them after your list has finished loading\n        if (initial2Renders.current===0){\n          setSubmitClass();\n        }\n      } else{\n        //ensures only 1 axios call is ever pending at any time.\n        if (pendingAxiosCalls===1){\n          console.log(\"cancel previous axios call\");\n          source.cancel();\n          //sends most up to date axios call.\n          postList();\n        } else{\n          postList();\n        }\n      }\n    } else{\n        if (submitClass){\n          setSubmitClass();\n        }\n    }\n  }, [listArr, listTitle]);\n\n  //Creates ref for our input text box to allow for autofocusing whenever listArr is changed\n  const inputTxt = useRef(null);\n\n  //Autofocuses our input text box whenever listArr or submitClass (controls input text box class names) is changed\n  useEffect(()=>{\n    inputTxt.current.focus();\n  }, [listArr, submitClass]);\n\n\n/*****************State variable handlers/CRUD******************/\n\n//handles changes of input text box\nfunction handleChange(e){\n  const newInput = e.target.value;\n  setInput(newInput);\n}\n\n//submits new item from the input text box to the array and clears text box\nfunction handleSubmit(e){\n  const newListItem = {item: input};\n  setListArr(prev=>{\n    return [...prev, newListItem];\n  });\n  setInput(\"\");\n  e.preventDefault();\n}\n\n//updates the targeted list item\nfunction handleUpdate(e, index){\n  setListArr(prev=>{\n    const prevClone = prev.map(a => Object.assign({}, a));\n\n    //recursive function used to reach the exact list item\n    function updateTarget(targetArray, targetIndex){\n      const currIndex = targetIndex[0];\n      if (targetIndex.length === 1){\n        targetArray[currIndex].item = input;\n      } else{\n        targetIndex.splice(0, 1);\n        updateTarget(targetArray[currIndex].items, targetIndex);\n      }\n    }\n\n    //calls the recursive function\n    updateTarget(prevClone, index);\n    return prevClone;\n  });\ne.preventDefault();\nsetInput(\"\");\n}\n\n//deletes selected item from array using the specified index/indices\nfunction handleDelete(e, index){\n  setListArr(prev=>{\n    const prevClone = prev.map(a => Object.assign({}, a));\n\n    //recursive function used to reach the exact list item\n    function deleteTarget(targetArray, targetIndex){\n      const currIndex = targetIndex[0];\n      if (targetIndex.length === 1){\n        targetArray.splice(currIndex, 1);\n      } else{\n        targetIndex.splice(0, 1);\n        deleteTarget(targetArray[currIndex].items, targetIndex);\n      }\n    }\n\n    //calls the recursive function\n    deleteTarget(prevClone, index);\n    return prevClone;\n  });\ne.preventDefault();\n}\n\n//Adds sub item to sublist or creates new sublist\nfunction handleSubItem(e, cumIndex){\n  setListArr(prev=>{\n    const prevClone = prev.map(a => Object.assign({}, a));\n\n    //recursive function used to add the subitem to the specified list item\n    function addOrCreateSubList(targetArray, targetIndex){\n      const currIndex = targetIndex[0];\n      if (targetIndex.length === 1){\n        targetArray[currIndex].items = targetArray[currIndex].items?[...targetArray[currIndex].items, {item: input}]:[{item: input}];\n      } else{\n        targetIndex.splice(0, 1);\n        addOrCreateSubList(targetArray[currIndex].items, targetIndex);\n      }\n    }\n\n    //calls the recursive function\n    addOrCreateSubList(prevClone, cumIndex);\n    return prevClone;\n  });\n  setInput(\"\");\n  e.preventDefault();\n}\n\n//changes list title\nfunction handleTitleChange(){\n  setListTitle(input);\n  setInput(\"\");\n}\n\n\n//displays all list and sublist items recursively.\n//Once an item is displayed, all subitems are then displayed. This process continues\n//until all subitems of subitems are displayed. Then the next list item is displayed.\nfunction displayNewList(newList, parentIndex){\n  const parInd = (parentIndex)?(parentIndex):[];\n  return <ul>\n  {newList.map((object, index)=>{\n    return <div><ListItem content={object.item} key={[...parInd, index]} cumIndex={[...parInd, index]} handUpda = {handleUpdate} handDele = {handleDelete} handSubI={handleSubItem}/>\n    {(object.items)&&(object.items.length !== 0)&&displayNewList(object.items, [...parInd, index])}\n    </div>\n  })}\n  </ul>;\n}\n\n\n  /*****************Return value******************/\n\n  return <div>\n  <h3 className=\"vis\"> {listTitle?listTitle:\"New\"} list <button className=\"invis\" onClick={handleTitleChange} type=\"submit\" name=\"titleButton\">Change title</button></h3>\n  {displayNewList(listArr)}\n  <form>\n  <input className={submitClass} onChange={handleChange} type=\"text\" name=\"userInput\" value={input} ref={inputTxt}/>\n  <button className={submitClass} onClick={handleSubmit} type=\"submit\" name=\"submitButton\">Submit</button>\n  </form></div>;\n}\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport List from '../components/List';\n\nexport default function CreateList(props){\n  return <div><List listId={props.location.listId} save={props.location.save} />\n  <br/><Link to=\"/\">\n    <button variant=\"outlined\">\n      Click here to return to the homepage\n    </button>\n  </Link>\n  {(props.location.save)&&<Link to=\"/MyLists\">\n    <button variant=\"outlined\">\n      Click here to return to your lists\n    </button>\n  </Link>}\n  </div>;\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from '../pages/Home';\nimport MyLists from '../pages/MyLists';\nimport CreateList from '../pages/CreateList';\n\nconst Main = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={Home}></Route>\n      <Route exact path='/MyLists' component={MyLists}></Route>\n      <Route exact path='/CreateList' component={CreateList}></Route>\n    </Switch>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router>\n  <Main />\n  </Router>, document.getElementById('root')\n);\n"],"sourceRoot":""}